# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


DEPTH = @DEPTH@
topsrcdir = @top_srcdir@
srcdir = @srcdir@
VPATH = @srcdir@

include $(DEPTH)/config/autoconf.mk

DEFINES += -DHAVE_CONFIG_H=vpx_config.h

MSVC_ENABLE_PGO := 1
FORCE_STATIC_LIB= 1
ifeq (WINNT,$(OS_TARGET))
VISIBILITY_FLAGS =
endif

LOCAL_INCLUDES += \
  -I. \
  -I$(topsrcdir)/media/libvpx \
  -I$(topsrcdir)/media/libvpx/vp8/ \
  -I$(topsrcdir)/media/libvpx/vp8/common/ \
  -I$(topsrcdir)/media/libvpx/vp8/common/arm \
  -I$(topsrcdir)/media/libvpx/vp8/common/x86 \
  -I$(topsrcdir)/media/libvpx/vp8/decoder \
  -I$(topsrcdir)/media/libvpx/vp8/decoder/arm \
  -I$(topsrcdir)/media/libvpx/vp8/decoder/x86 \
  -I$(topsrcdir)/media/libvpx/vp9/ \
  -I$(topsrcdir)/media/libvpx/vp9/common/ \
  -I$(topsrcdir)/media/libvpx/vp9/common/arm \
  -I$(topsrcdir)/media/libvpx/vp9/common/x86 \
  -I$(topsrcdir)/media/libvpx/vp9/decoder/ \
  -I$(topsrcdir)/media/libvpx/vpx_codec \
  -I$(topsrcdir)/media/libvpx/vpx_mem/ \
  -I$(topsrcdir)/media/libvpx/vpx_mem/include \
  -I$(topsrcdir)/media/libvpx/vpx_ports/ \
  -I$(topsrcdir)/media/libvpx/vpx_scale/ \
  -I$(topsrcdir)/media/libvpx/vp8/encoder \
  -I$(topsrcdir)/media/libvpx/vp8/encoder/arm \
  -I$(topsrcdir)/media/libvpx/vp8/encoder/arm/armv5te \
  -I$(topsrcdir)/media/libvpx/vp8/encoder/arm/neon \
  -I$(topsrcdir)/media/libvpx/vp8/encoder/arm/armv6 \
  -I$(topsrcdir)/media/libvpx/vpx_scale/arm \
  -I$(topsrcdir)/media/libvpx/vpx_scale/arm/neon \
  -I$(topsrcdir)/media/libvpx/vp8/encoder/x86 \
  -I$(topsrcdir)/media/libvpx/vp9/encoder \
  -I$(topsrcdir)/media/libvpx/vp9/encoder/x86 \
  -I$(topsrcdir)/media/libvpx/third_party/x86inc \
  -I$(topsrcdir)/media/libvpx/vpx_dsp \
  $(NULL)

VPATH += \
  $(srcdir)/build/make \
  $(srcdir)/vpx \
  $(srcdir)/vpx/src \
  $(srcdir)/vpx_mem \
  $(srcdir)/vpx_mem/include \
  $(srcdir)/vpx_ports \
  $(srcdir)/vpx_scale \
  $(srcdir)/vpx_scale/arm \
  $(srcdir)/vpx_scale/arm/neon \
  $(srcdir)/vpx_scale/generic \
  $(srcdir)/vp8 \
  $(srcdir)/vp8/common \
  $(srcdir)/vp8/common/arm \
  $(srcdir)/vp8/common/arm/armv6 \
  $(srcdir)/vp8/common/arm/neon \
  $(srcdir)/vp8/common/generic \
  $(srcdir)/vp8/common/x86 \
  $(srcdir)/vp8/decoder \
  $(srcdir)/vp8/decoder/arm \
  $(srcdir)/vp8/decoder/arm/armv6 \
  $(srcdir)/vp8/decoder/arm/neon \
  $(srcdir)/vp8/decoder/generic \
  $(srcdir)/vp8/decoder/x86 \
  $(srcdir)/vp9 \
  $(srcdir)/vp9/common \
  $(srcdir)/vp9/common/arm \
  $(srcdir)/vp9/common/arm/neon \
  $(srcdir)/vp9/common/generic \
  $(srcdir)/vp9/common/x86 \
  $(srcdir)/vp9/decoder \
  $(srcdir)/vp8/encoder \
  $(srcdir)/vp8/encoder/arm \
  $(srcdir)/vp8/encoder/arm/armv5te \
  $(srcdir)/vp8/encoder/arm/armv6 \
  $(srcdir)/vp8/encoder/arm/neon \
  $(srcdir)/vp8/encoder/generic \
  $(srcdir)/vp8/encoder/x86 \
  $(srcdir)/vp9/encoder \
  $(srcdir)/vp9/encoder/x86 \
  $(srcdir)/vpx_scale/arm \
  $(srcdir)/vpx_scale/arm/neon \
  $(srcdir)/third_party/x86inc \
  $(srcdir)/vpx_dsp \
  $(NULL)

#Setup the libvpx assembler config.
AS=$(VPX_AS)
ASFLAGS=$(VPX_ASFLAGS) -I. -I$(topsrcdir)/media/libvpx/ -I$(topsrcdir)/media/libvpx/vpx_ports/
AS_DASH_C_FLAG=$(VPX_DASH_C_FLAG)
ASM_SUFFIX=$(VPX_ASM_SUFFIX)

CSRCS += \
  alloccommon.c \
  blockd.c \
  copy_c.c \
  debugmodes.c \
  dequantize.c \
  entropy.c \
  entropymode.c \
  entropymv.c \
  extend.c \
  filter.c \
  findnearmv.c \
  systemdependent.c \
  idct_blk.c \
  idctllm.c \
  loopfilter.c \
  loopfilter_filters.c \
  mbpitch.c \
  modecont.c \
  quant_common.c \
  reconinter.c \
  reconintra.c \
  reconintra4x4.c \
  rtcd.c \
  setupintrarecon.c \
  swapyv12buffer.c \
  treecoder.c \
  variance_c.c \
  dboolhuff.c \
  decodeframe.c \
  decodemv.c \
  detokenize.c \
  onyxd_if.c \
  threading.c \
  bitstream.c \
  dct.c \
  denoising.c \
  encodeframe.c \
  encodeintra.c \
  encodemb.c \
  encodemv.c \
  ethreading.c \
  firstpass.c \
  lookahead.c \
  mcomp.c \
  modecosts.c \
  mr_dissim.c \
  onyx_if.c \
  pickinter.c \
  picklpf.c \
  quantize.c \
  ratectrl.c \
  rdopt.c \
  segmentation.c \
  temporal_filter.c \
  tokenize.c \
  treewriter.c \
  vp8_cx_iface.c \
  vp8_dx_iface.c \
  vp9_alloccommon.c \
  vp9_blockd.c \
  vp9_common_data.c \
  vp9_convolve.c \
  vp9_debugmodes.c \
  vp9_entropy.c \
  vp9_entropymode.c \
  vp9_entropymv.c \
  vp9_filter.c \
  vp9_frame_buffers.c \
  vp9_idct.c \
  vp9_loopfilter.c \
  vp9_loopfilter_filters.c \
  vp9_mvref_common.c \
  vp9_pred_common.c \
  vp9_prob.c \
  vp9_quant_common.c \
  vp9_reconinter.c \
  vp9_reconintra.c \
  vp9_rtcd.c \
  vp9_scale.c \
  vp9_scan.c \
  vp9_seg_common.c \
  vp9_thread.c \
  vp9_thread_common.c \
  vp9_tile_common.c \
  vp9_decodeframe.c \
  vp9_decodemv.c \
  vp9_decoder.c \
  vp9_detokenize.c \
  vp9_dsubexp.c \
  vp9_dthread.c \
  vp9_read_bit_buffer.c \
  vp9_reader.c \
  vp9_aq_complexity.c \
  vp9_aq_cyclicrefresh.c \
  vp9_aq_variance.c \
  vp9_avg.c \
  vp9_bitstream.c \
  vp9_context_tree.c \
  vp9_cost.c \
  vp9_dct.c \
  vp9_encodeframe.c \
  vp9_encodemb.c \
  vp9_encodemv.c \
  vp9_encoder.c \
  vp9_ethread.c \
  vp9_extend.c \
  vp9_firstpass.c \
  vp9_lookahead.c \
  vp9_mbgraph.c \
  vp9_mcomp.c \
  vp9_picklpf.c \
  vp9_pickmode.c \
  vp9_quantize.c \
  vp9_ratectrl.c \
  vp9_rd.c \
  vp9_rdopt.c \
  vp9_resize.c \
  vp9_segmentation.c \
  vp9_skin_detection.c \
  vp9_speed_features.c \
  vp9_subexp.c \
  vp9_svc_layercontext.c \
  vp9_temporal_filter.c \
  vp9_tokenize.c \
  vp9_treewriter.c \
  vp9_variance.c \
  vp9_write_bit_buffer.c \
  vp9_writer.c \
  vp9_cx_iface.c \
  vp9_dx_iface.c \
  vpx_codec.c \
  vpx_decoder.c \
  vpx_encoder.c \
  vpx_image.c \
  vpx_psnr.c \
  sad.c \
  variance.c \
  vpx_dsp_rtcd.c \
  vpx_mem.c \
  gen_scalers.c \
  vpx_scale.c \
  yv12config.c \
  yv12extend.c \
  vpx_scale_rtcd.c \
  $(NULL)

ifdef MOZ_VPX_ERROR_CONCEALMENT
CSRCS += \
  error_concealment.c \
  $(NULL)
endif

ifdef VPX_X86_ASM
# Building on an x86 platform with a supported assembler, include
# the optimized assembly in the build.

CSRCS += \
  mfqe.c \
  postproc.c \
  filter_x86.c \
  idct_blk_mmx.c \
  idct_blk_sse2.c \
  loopfilter_x86.c \
  recon_wrapper_sse2.c \
  variance_ssse3.c \
  vp8_asm_stubs.c \
  vp8_variance_mmx.c \
  vp8_variance_sse2.c \
  denoising_sse2.c \
  quantize_sse2.c \
  quantize_sse4.c \
  quantize_ssse3.c \
  vp8_enc_stubs_mmx.c \
  vp8_enc_stubs_sse2.c \
  vp9_asm_stubs.c \
  vp9_idct_intrin_sse2.c \
  vp9_loopfilter_intrin_sse2.c \
  vp9_subpixel_8t_intrin_ssse3.c \
  vp9_avg_intrin_sse2.c \
  vp9_dct_sse2.c \
  vp9_dct_ssse3.c \
  vp9_quantize_sse2.c \
  vp9_variance_sse2.c \
  variance_mmx.c \
  variance_sse2.c \
  $(NULL)

VPX_ASM_ENC_OFFSETS_SRCS = \
  $(NULL)

ASFILES += \
  copy_sse2.asm \
  copy_sse3.asm \
  dequantize_mmx.asm \
  idctllm_mmx.asm \
  idctllm_sse2.asm \
  iwalsh_mmx.asm \
  iwalsh_sse2.asm \
  loopfilter_mmx.asm \
  loopfilter_sse2.asm \
  mfqe_sse2.asm \
  postproc_mmx.asm \
  postproc_sse2.asm \
  recon_mmx.asm \
  recon_sse2.asm \
  subpixel_mmx.asm \
  subpixel_sse2.asm \
  subpixel_ssse3.asm \
  variance_impl_sse2.asm \
  variance_impl_ssse3.asm \
  vp8_variance_impl_mmx.asm \
  dct_mmx.asm \
  dct_sse2.asm \
  encodeopt.asm \
  fwalsh_sse2.asm \
  quantize_mmx.asm \
  subtract_mmx.asm \
  subtract_sse2.asm \
  temporal_filter_apply_sse2.asm \
  vp9_copy_sse2.asm \
  vp9_intrapred_sse2.asm \
  vp9_intrapred_ssse3.asm \
  vp9_loopfilter_mmx.asm \
  vp9_subpixel_8t_sse2.asm \
  vp9_subpixel_8t_ssse3.asm \
  vp9_subpixel_bilinear_sse2.asm \
  vp9_subpixel_bilinear_ssse3.asm \
  vp9_dct_mmx.asm \
  vp9_error_sse2.asm \
  vp9_subpel_variance.asm \
  vp9_subtract_sse2.asm \
  vp9_temporal_filter_apply_sse2.asm \
  sad4d_sse2.asm \
  sad_mmx.asm \
  sad_sse2.asm \
  sad_sse3.asm \
  sad_sse4.asm \
  sad_ssse3.asm \
  variance_impl_mmx.asm \
  emms.asm \
  $(VPX_ASM_ENC_OFFSETS_SRCS) \
  $(NULL)

ifeq (64,$(findstring 64,$(OS_TEST)))
VPATH += \
  $(srcdir)/third_party/x86inc \
  $(NULL)

ASFILES += \
  x86inc.asm \
  loopfilter_block_sse2_x86_64.asm \
  ssim_opt_x86_64.asm \
  vp9_idct_ssse3_x86_64.asm \
  vp9_dct_ssse3_x86_64.asm \
  vp9_quantize_ssse3_x86_64.asm \
  vp9_ssim_opt_x86_64.asm \
  $(NULL)
endif

# AVX2 only supported on
# Darwin toolchain right now
ifeq ($(OS_ARCH),Darwin)
CSRCS += \
  vp9_loopfilter_intrin_avx2.c \
  vp9_subpixel_8t_intrin_avx2.c \
  vp9_dct_avx2.c \
  vp9_error_intrin_avx2.c \
  vp9_subpel_variance_impl_intrin_avx2.c \
  vp9_variance_avx2.c \
  sad4d_avx2.c \
  sad_avx2.c \
  variance_avx2.c \
  variance_impl_avx2.c \
  $(NULL)

vp9_loopfilter_intrin_avx2.o: CFLAGS += -mavx2
endif

endif

ifdef VPX_ARM_ASM
# Building on an ARM platform with a supported assembler, include
# the optimized assembly in the build.

ifeq ($(OS_TARGET),Android)

# Older versions of the Android NDK don't pre-define anything to indicate the
# OS they're on, so do it for them.
DEFINES += -D__linux__

# For cpu-features.h
LOCAL_INCLUDES += -I$(ANDROID_NDK)/sources/android/cpufeatures
ifndef MOZ_WEBRTC
# For cpu-features.c
VPATH += $(ANDROID_NDK)/sources/android/cpufeatures
CSRCS += cpu-features.c
endif
endif

CSRCS += \
  idct_blk_v6.c \
  bilinearfilter_arm.c \
  dequantize_arm.c \
  filter_arm.c \
  loopfilter_arm.c \
  bilinearpredict_neon.c \
  copymem_neon.c \
  dc_only_idct_add_neon.c \
  dequant_idct_neon.c \
  dequantizeb_neon.c \
  idct_blk_neon.c \
  idct_dequant_0_2x_neon.c \
  idct_dequant_full_2x_neon.c \
  iwalsh_neon.c \
  loopfilter_neon.c \
  loopfiltersimplehorizontaledge_neon.c \
  loopfiltersimpleverticaledge_neon.c \
  mbloopfilter_neon.c \
  reconintra_neon.c \
  shortidct4x4llm_neon.c \
  sixtappredict_neon.c \
  vp8_subpixelvariance_neon.c \
  variance_arm.c \
  dct_arm.c \
  denoising_neon.c \
  fastquantizeb_neon.c \
  shortfdct_neon.c \
  subtract_neon.c \
  vp8_shortwalsh4x4_neon.c \
  vp9_convolve_neon.c \
  vp9_iht4x4_add_neon.c \
  vp9_iht8x8_add_neon.c \
  vp9_loopfilter_neon.c \
  vp9_reconintra_neon.c \
  vp9_dct_neon.c \
  vp9_quantize_neon.c \
  vp9_subtract_neon.c \
  vp9_variance_neon.c \
  vp9enc_avg_neon.c \
  sad4d_neon.c \
  sad_neon.c \
  variance_neon.c \
  arm_cpudetect.c \
  $(NULL)

VPX_ASFILES = \
  bilinearfilter_v6.asm \
  copymem16x16_v6.asm \
  copymem8x4_v6.asm \
  copymem8x8_v6.asm \
  dc_only_idct_add_v6.asm \
  dequant_idct_v6.asm \
  dequantize_v6.asm \
  filter_v6.asm \
  idct_v6.asm \
  intra4x4_predict_v6.asm \
  iwalsh_v6.asm \
  loopfilter_v6.asm \
  simpleloopfilter_v6.asm \
  sixtappredict8x4_v6.asm \
  vp8_variance_halfpixvar16x16_h_armv6.asm \
  vp8_variance_halfpixvar16x16_hv_armv6.asm \
  vp8_variance_halfpixvar16x16_v_armv6.asm \
  vp8_short_fdct4x4_armv6.asm \
  walsh_v6.asm \
  vp9_convolve8_avg_neon_asm.asm \
  vp9_convolve8_neon_asm.asm \
  vp9_convolve_avg_neon_asm.asm \
  vp9_copy_neon_asm.asm \
  vp9_idct16x16_1_add_neon_asm.asm \
  vp9_idct16x16_add_neon_asm.asm \
  vp9_idct16x16_neon.c
  vp9_idct32x32_1_add_neon_asm.asm \
  vp9_idct32x32_add_neon_asm.asm \
  vp9_idct4x4_1_add_neon_asm.asm \
  vp9_idct4x4_add_neon_asm.asm \
  vp9_idct8x8_1_add_neon_asm.asm \
  vp9_idct8x8_add_neon_asm.asm \
  vp9_loopfilter_16_neon_asm.asm \
  vp9_loopfilter_4_neon_asm.asm \
  vp9_loopfilter_8_neon_asm.asm \
  vp9_mb_lpf_neon.asm \
  vp9_reconintra_neon_asm.asm \
  vp9_save_reg_neon.asm \
  sad_media.asm \
  variance_media.asm \
  $(NULL)

# Files which depend on asm_com_offsets.asm (Apparently not used in libvpx 1.3.0 for ARM)
VPX_ASM_COM_OFFSETS_SRCS = \
  $(NULL)

# Files which depend on asm_enc_offsets.asm (Apparently not used in libvpx 1.3.0 for ARM)
VPX_ASM_ENC_OFFSETS_SRCS = \
  boolhuff_armv5te.asm \
  $(NULL)

ifdef VPX_AS_CONVERSION
# The ARM asm is written in ARM RVCT syntax, but we actually build it with
# gas using GNU syntax. Add some rules to perform the conversion.
VPX_CONVERTED_ASFILES = $(addsuffix .$(ASM_SUFFIX), $(VPX_ASFILES))

ASFILES += $(VPX_CONVERTED_ASFILES)
GARBAGE += $(VPX_CONVERTED_ASFILES)

%.asm.$(ASM_SUFFIX): %.asm
	$(VPX_AS_CONVERSION) < $< > $@
else
ASFILES += $(VPX_ASFILES)
endif

else
# boolhuff_armv5te.asm defines the same functions as boolhuff.c instead of
# using RTCD, so we have to make sure we only add one of the two.
CSRCS += boolhuff.c
endif

ifdef VPX_NEED_OBJ_INT_EXTRACT

# We don't have a compiler that supports a compatible inline asm syntax, so we
# have to resort to extracting asm offsets from a compiled object. This only
# works if we have the appropriate system headers obj_int_extract needs to
# parse that format, and so only has limited support for cross-compilation.

ifdef VPX_ARM_ASM
VPX_OIE_FORMAT := rvds
else
VPX_OIE_FORMAT := gas
endif

HOST_PROGRAM = host_obj_int_extract$(HOST_BIN_SUFFIX)

CSRCS += vpx_scale_asm_offsets.c

GARBAGE += vpx_scale_asm_offsets.$(OBJ_SUFFIX) vpx_scale_asm_offsets.asm

CSRCS += vp8_asm_enc_offsets.c

GARBAGE += vp8_asm_enc_offsets.$(OBJ_SUFFIX) vp8_asm_enc_offsets.asm

else

# We can extract the asm offsets directly from generated assembly using inline
# asm. This is the preferred method.

vpx_scale_asm_offsets.s: CFLAGS += -DINLINE_ASM

OFFSET_PATTERN := '^[a-zA-Z0-9_]* EQU'

vpx_scale_asm_offsets.asm: vpx_scale_asm_offsets.s
	grep $(OFFSET_PATTERN) $< | sed -e 's/[$$\#]//g' \
	    $(if $(VPX_AS_CONVERSION),| $(VPX_AS_CONVERSION)) > $@

GARBAGE += vpx_scale_asm_offsets.s vpx_scale_asm_offsets.asm

vp8_asm_enc_offsets.s: CFLAGS += -DINLINE_ASM

vp8_asm_enc_offsets.s: $(srcdir)/vp8/encoder/vp8_asm_enc_offsets.c
	$(REPORT_BUILD)
	$(CC) -S $(COMPILE_CFLAGS) $(NO_INTEGRATED_AS_CFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)

vp8_asm_enc_offsets.asm: vp8_asm_enc_offsets.s
	grep $(OFFSET_PATTERN) $< | sed -e 's/[$$\#]//g' \
	    $(if $(VPX_AS_CONVERSION),| $(VPX_AS_CONVERSION)) > $@

GARBAGE += vp8_asm_enc_offsets.s vp8_asm_enc_offsets.asm

endif

EXTRA_MDDEPEND_FILES = vp8_asm_enc_offsets.s.pp vp8_asm_enc_offsets.$(OBJ_SUFFIX).pp vpx_scale_asm_offsets.s.pp vpx_scale_asm_offsets.$(OBJ_SUFFIX).pp

include $(topsrcdir)/config/rules.mk

# This must be after rules.mk in order to use $(OBJ_SUFFIX) outside a
# recursively-expanded variable.
ifdef VPX_NEED_OBJ_INT_EXTRACT

# only for MSVC
ifdef _MSC_VER
vpx_scale_asm_offsets.$(OBJ_SUFFIX): CFLAGS += -GL-
endif

vpx_scale_asm_offsets.asm: vpx_scale_asm_offsets.$(OBJ_SUFFIX) $(HOST_PROGRAM)
	./$(HOST_PROGRAM) $(VPX_OIE_FORMAT) $< \
	    $(if $(VPX_AS_CONVERSION),| $(VPX_AS_CONVERSION)) > $@

# Filter out this object, because we don't want to link against it.
# It was generated solely so it could be parsed by obj_int_extract.
OBJS := $(filter-out vpx_scale_asm_offsets.$(OBJ_SUFFIX),$(OBJS))

ifdef _MSC_VER
vp8_asm_enc_offsets.$(OBJ_SUFFIX): CFLAGS += -GL-
endif

vp8_asm_enc_offsets.asm: vp8_asm_enc_offsets.$(OBJ_SUFFIX) $(HOST_PROGRAM)
	./$(HOST_PROGRAM) $(VPX_OIE_FORMAT) $< \
	    $(if $(VPX_AS_CONVERSION),| $(VPX_AS_CONVERSION)) > $@

# Filter out this object, because we don't want to link against it.
# It was generated solely so it could be parsed by obj_int_extract.
OBJS := $(filter-out vp8_asm_enc_offsets.$(OBJ_SUFFIX),$(OBJS))

# These dependencies are not generated automatically, so do it manually.
ifdef VPX_AS_CONVERSION
$(addsuffix .$(OBJ_SUFFIX), $(VPX_ASM_COM_OFFSETS_SRCS)): vpx_scale_asm_offsets.asm
$(addsuffix .$(OBJ_SUFFIX), $(VPX_ASM_ENC_OFFSETS_SRCS)): vp8_asm_enc_offsets.asm
else
$(patsubst %.$(ASM_SUFFIX),%.$(OBJ_SUFFIX), $(VPX_ASM_COM_OFFSETS_SRCS)): vpx_scale_asm_offsets.asm
$(patsubst %.$(ASM_SUFFIX),%.$(OBJ_SUFFIX), $(VPX_ASM_ENC_OFFSETS_SRCS)): vp8_asm_enc_offsets.asm
endif
endif

# Workaround a bug of Sun Studio (CR 6963410)
ifdef SOLARIS_SUNPRO_CC
ifeq (86,$(findstring 86,$(OS_TEST)))
filter.o: filter.c Makefile.in
	$(REPORT_BUILD)
	@$(MAKE_DEPS_AUTO_CC)
	$(CC) -o $@ -c $(patsubst -xO[45],-xO3,$(COMPILE_CFLAGS)) $<
endif
endif
